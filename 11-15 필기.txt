■ 3. 변수명 만들기

	* 변수 이름 규칙

	1. 변수 이름에는 다음 문자만 사용할 수 있다.
		- 소문자(a~z)
		- 대문자(A~Z)
		- 숫자(0~9)
		- 언더 스코어(_)

	2. 변수 이름은 숫자로 시작할 수 없다.

	3. 예약어를 사용할 수 없다
		예 : False, Class, Is, Return

	* 일반 변수 사용 예 :
		'변수 안에는 데이터가 한개'

		a = 100

		print(a)	

		print(type(a)) 		# a 변수의 데이터 유형을 확인하겠다.
		<class 'int'>



문제 1. 위의 예제를 따라서 문자형 변수를 만들고 type을 확인하시오!

	b= 'heaven'

	print(type(b))
	<class 'str'>


■ 리스트 변수
	"변수 안에 여러개의 데이터(요소)가 들어있는 변수"

	d = [1000, 2000, 3000, 4000]
	print(d)
	print(typed(d))
	
	[1000, 2000, 3000, 4000]
	<class 'list'>



문제 2. d로 만든 리스트 변수에서 숫자 1000 을 출력하시오 !

	print(d[0])

	1000

	* 파이썬은 시작을 0부터 시작한다.

문제 3. d list변수 안에 있는 요소들을 하나씩 다 출력하시오 !

	d = [1000, 2000, 3000, 4000]
	
	for i in d:
	    print(i)		# 앞에 4을 띄어서 쓰는것을 파이썬 약속이다.
				  괄호를 생략하기 때문에 띄어쓰기를 기호로 쓴다.
				  괄호 대신 공백 !

		* 설명 : 자바나 C언어를 사용하던 사람들은 뒤에 세미콜론 붙이는 습관이 있는데
			 파이썬에서는 기본적으로 구문 뒤에 아무것도 붙이지 않는다.
			 if문, while loop, for loop, def, class 문의 뒤에는 콜론(:)을 꼭 붙여야 한다.

			 파이썬이 다른 언어보다 보기 쉽고 소스코드가 간결한 이유는
			 바로 콜론(:)을 사용해서 들여쓰기를 하도록 만들었기 때문이다.

			 콜론(:)뒤에 나오는 명령어를 다음 줄에 작성하려면 들여쓰기를 해야한다.

		예제 : 
			for i in range(100):		# range 연속된 숫자를 생성
			    print(i)



■ 4. 변수에 값대입하기

	설명 : 파이썬 에서는 변수에 값을 대입할 때 = (assignment) 기호를 사용한다.

	예제 : a = 7788

		v_empno number(10) = 7788 ;   <----PL/SQL 코드

	파이썬의 코드는 심플함을 철학으로 한다. 

	import this

	The Zen of Python, by Tim Peters
	
	Beautiful is better than ugly.
	Explicit is better than implicit.
	Simple is better than complex.
	Complex is better than complicated.
	Flat is better than nested.
	Sparse is better than dense.
	Readability counts.
	Special cases aren't special enough to break the rules.
	Although practicality beats purity.
	Errors should never pass silently.
	Unless explicitly silenced.
	In the face of ambiguity, refuse the temptation to guess.
	There should be one-- and preferably only one --obvious way to do it.
	Although that way may not be obvious at first unless you're Dutch.
	Now is better than never.
	Although never is often better than *right* now.
	If the implementation is hard to explain, it's a bad idea.
	If the implementation is easy to explain, it may be a good idea.
	Namespaces are one honking great idea -- let's do more of those!


	파이썬에서 사용하는 변수는 객체를 가리키는 것 !

	a = 3		# 3이라는 값을 가지는 정수형 자료형이 자동으로 메모리에 생성이 되고 a는 변수 이름
			  이고 3이라는 객체가 저장된 메모리의 위치를 가리키는 것이다.

	a -----------> 3 
		       ↑
			정수형 객체

	변수 a 는 객체가 저장된 메모리의 위치를 가리키는 레퍼런스라고 할 수 있다.

	a = 3
	b = 3
	a is b

	True

		a 가 3을 가리키고 있고 b 도 3을 가리키고 있다.
		즉, 3을 가리키는 변수는 2개가 있는 것이



문제 4. a와 b는 정말 같은 객체를 가리키는 것인가?

	a = 3
	b = 3
	import sys
	print( sys.getrefcount(3) )	# 3 이라는 정수형 객체를 참조하는 변수의 갯수를 확인할 수 있다.

	6175




■ 5. 주석 처리하기 (#)

	프로그램에서 코멘트는 인터프리터에 의해 무시되는 텍스트의 한 부분이다.
	코드를 설명하거나 나중에 어떤 문제를 고치기 위해 표시하는 등 다양한 목적으로 코멘트를 사용할 
	수 있다.


	1. 주석 처리하는 방법 ( # ) 
		# 더하기 하는 프로그램입니다.
		a=1
		b=1
		print(a+b)


	2. 라인을 유지하기 ( \ )

		1 + 2 \
		 +3


	3. 여러행 주석처리하는 방법 (""")

		""" This program was made \
		    by Mr song """







■ 6. 자료형 개념 배우기

	* 자료형이란 ?
		"프로그래밍을 할 때 쓰이는 숫자, 문자열 등 자료 형태로 사용되는 모든 것을 뜻한다"

	* 파이썬의 자료형 
		1. 숫자
		2. 문자
		3. 리스트 : 데이터의 목록을 다루는 자료형
			    예 : d = [1, 2, 3]
				 d[0] = 5		# 리스트 변수는 변경이 가능하다.
				 print(d)

		4. 튜플 : 데이터의 목록을 다루는 자료형인데 리스트와는 다르게 변경이 불가능한 자료형
			    예 : f = (1, 2, 3)
				 print( type( f ) )

				 <class 'tuple'>

				 f[0] = 5
				 TypeError: 'tuple' object does not support item assignment

			데이터가 변경이 안되기 때문에 믿을 수 있는 데이터가 된다


		5. 딕셔너리 : key와 value를 조합해서 사용하는 자료형
				예 : m={}
				     m['python'] = 'www.python.org'
					 ↑		  ↑
				     인덱스, key        값, value

				     print(m)
				     {'python': 'www.python.org'}

				     print(m.keys())
				     dict_keys(['python'])
				
				     print (m.values())
				     dict_values(['www.python.org'])


		6. 집합 자료형 : 리스트 데이터 집합의 교집합, 합집합, 차집합을 출력할 때 유용하게 사용되
				 는 자료형
				예 : s1 = set( [1, 2, 3, 4, 5, 6])
				     s2 = set( [4, 5, 6, 7, 8, 9])

				     print ( s1 & s2 )			#교집합
				     {4, 5, 6}

				     print ( s1 | s2 )			#합집합
				     {1, 2, 3, 4, 5, 6, 7, 8, 9}

				     print ( s1 - s2 )			#차집합
				     {1, 2, 3}



문제 5. emp2.csv를 파이썬으로 로드해서 print하시오 !

	import csv				# csv파일을 가져와서 쓰겠다.
	
	file = open("c:\\emp2.csv",'r')		# file이라는 변수에 디렉토리를 오픈해라 ('r'은 read)
						  \\를 쓰는 습관을 들여라 (\e 라는 예약어가 있어서)
	emp_csv = csv.reader(file)		# emp_csv 라는 변수에 파일을 읽어서 넣겠다.
	
	for emp_list in emp_csv:		# 모두 출력
	    print(emp_list)
	
	['7839', 'KING', 'PRESIDENT', '0', '1981-11-17', '5000', '0', '10']
	['7698', 'BLAKE', 'MANAGER', '7839', '1981-05-01', '2850', '0', '30']
	['7782', 'CLARK', 'MANAGER', '7839', '1981-05-09', '2450', '0', '10']
	['7566', 'JONES', 'MANAGER', '7839', '1981-04-01', '2975', '0', '20']
	['7654', 'MARTIN', 'SALESMAN', '7698', '1981-09-10', '1250', '1400', '30']
	['7499', 'ALLEN', 'SALESMAN', '7698', '1981-02-11', '1600', '300', '30']
	['7844', 'TURNER', 'SALESMAN', '7698', '1981-08-21', '1500', '0', '30']
	['7900', 'JAMES', 'CLERK', '7698', '1981-12-11', '950', '0', '30']
	['7521', 'WARD', 'SALESMAN', '7698', '1981-02-23', '1250', '500', '30']
	['7902', 'FORD', 'ANALYST', '7566', '1981-12-11', '3000', '0', '20']
	['7369', 'SMITH', 'CLERK', '7902', '1980-12-09', '800', '0', '20']
	['7788', 'SCOTT', 'ANALYST', '7566', '1982-12-22', '3000', '0', '20']
	['7876', 'ADAMS', 'CLERK', '7788', '1983-01-15', '1100', '0', '20']
	['7934', 'MILLER', 'CLERK', '7782', '1982-01-11', '1300', '0', '10']


문제 6. 이름과 월급을 출력하시오!

	import csv

	file = open("c:\\emp2.csv",'r')
	emp_csv = csv.reader(file)

	for emp_list in emp_csv:
	    print(emp_list[1], emp_list[5])

		※ 파일 불러오는 과정을 꼭 써야 한다. 따로 DB에 저장시키는 개념이 아니다.







■ 8. 들여쓰기 개념 배우기

	파이썬이 다른 언어보다 보기 쉽고 코드가 간결한 이유는 바로 콜론(:)을 사용해서 들여쓰기를 하도록
	만들었기 때문이다.
	파이썬은 블럭 구분을 들여쓰기를 통해서 한다.
	콜론(:) 뒤에 나오는 명령어를 다음줄에 작성하려면 ★4칸★ 들여쓰기를 해야한다. 

	예제 : 월급이 3000인 사원들의 이름과 월급을 출력하시오 !

		import csv

		file = open("c:\\emp2.csv",'r')
		emp_csv = csv.reader(file)
		
		for emp_list in emp_csv:
		    if int( emp_list[5] ) ==3000:		# 오라클로치면 int --> to_number
		        print( emp_list[1], emp_list[5] )


문제 7. 직업이 ANALYST, CLECK 인 사원들의 이름과 직업을 출력하시오 !

	import csv

	file = open("c:\\emp2.csv",'r')
	emp_csv = csv.reader(file)
	
	for emp_list in emp_csv:
	    if emp_list[2] in ('ANALYST','CLERK' ):
	        print(emp_list[1], emp_list[5])

		JAMES 950
		FORD 3000
		SMITH 800
		SCOTT 3000
		ADAMS 1100
		MILLER 1300

문제 8. 부서번호가 10번인 사원들의 이름과 월급과 부서번호를 출력하시오 !

	import csv
	
	file = open("c:\\emp2.csv",'r')
	emp_csv = csv.reader(file)
	
	for emp_list in emp_csv:
	    if int(emp_list[7]) == 10 :
	        print(emp_list[1], emp_list[5], emp_list[7])
	
		KING 5000 10
		CLARK 2450 10
		MILLER 1300 10







■ 9. if문 개념 배우기 ① (if ~ else)

	if문 예제 1 :
		x = 1
		y = 2
		if x >= y:
		    print( 'x가 y보다 크거나 같습니다.' )
		else:
		    print ( 'x가 y보다 작습니다.' )

		x가 y보다 작습니다.	


	※ 파이썬에서 콜론(:)을 쓰는 경우 4가지
		1. if문
		2. for loop문
		3. while loop문
		4. def 함수문


	if문 예제 2 :
		a = int( input( '숫자를 입력하세요 ~ ' ) )	# input 입력하게 유도하는 명령어
		
		if a%2 == 0:
		    print( '짝수입니다.' )
		else:
		    print( '홀수입니다.' )

		숫자를 입력하세요 ~ 8
		짝수입니다.


문제 9. 숫자를 2개를 각각 아래처럼 물어보게 하고 아래처럼 출력되게 하시오 !

	첫번째 숫자를 입력하세요 ~ 1
	
	두번째 숫자를 입력하세요 ~ 2
	a가  1 이고 는  2 보다 작습니다.

	a = int( input( '첫번째 숫자를 입력하세요 ~ '))
	b = int( input( '두번째 숫자를 입력하세요 ~ '))
	
	if a < b:
	    print( a, '는 ', b, '보다 작습니다.')
	else:
	    print( a, '는 ', b, '보다 큽니다.')
	



a = int( input( '첫번째 숫자를 입력하세요 ~ '))
b = int( input( '두번째 숫자를 입력하세요 ~ '))

if a < b:
    print( 'a가', a, '이고', 'b가', b, '일때', a, '는', b, '보다 작습니다.')
else:
    print( 'a가', a, '이고', 'b가', b, '일때', a, '는', b, '보다 큽니다.')



문제 10. 이름을 물어보게 하고 이름을 입력하면 해당 사원의 월급이 출력되게 하시오 !

	이름을 입력하세요 ~ SCOTT
	3000

	a = str( input( '이름을 입력하세요 ~'))
	
	import csv
	
	file = open("c:\\emp2.csv",'r')
	emp_csv = csv.reader(file)
	
	for emp_list in emp_csv:
	    if a == emp_list[1]:
	        print(emp_list[5])


문제 11. 위의 문제를 다시 수행하는데 scott을 대문자로 입력하던 소문자로 입력하던 상관없이 출력되게
	 하시오!

	a = str( input( '이름을 입력하세요 ~' ) )
	import csv
	file = open("c:\\emp2.csv",'r')
	emp_csv = csv.reader(file)
	
	for emp_list in emp_csv:
	    if a.upper() == emp_list[1]:
	        print(emp_list[5])
	
		이름을 입력하세요 ~scott
		3000

		이름을 입력하세요 ~SCOTT
		3000






■ 10. if문 개념 배우기 ② (if ~ elif)

	예 : 
		a = int( input( '첫번째 숫자를 입력하세요 ~ '))
		b = int( input( '두번째 숫자를 입력하세요 ~ '))
		
		if a < b:
		    print( a, '는 ', b, '보다 작습니다.')
		elif a == b:
		    print( a, '는 ', b, '랑 같습니다.')
		else:
		    print( a, '는 ', b, '보다 큽니다.')



문제 12. 이름을 물어보게 하고 이름을 입력해서 해당 사원의 월급이 3000 이상이면 고소득자 입니다. 라는
	 메세지출력, 2000 ~ 3000 사이이면 적당합니다. 라는 메세지 출력, 2000 이하면 월급 인상자 입니다.
	 라는 메세지가 출력되게 하시오 !

	답1
		a = str( input( '이름을 입력하세요 ~' ) )
		import csv
		file = open("c:\\emp2.csv",'r')
		emp_csv = csv.reader(file)
		
		for emp_list in emp_csv:
		    if emp_list[1] == a.upper():
		        if int(emp_list[5]) >= 3000:
		            print( '고소득자 입니다.' )
		        elif int(emp_list[5]) >= 2000:
		            print( '적당합니다.' )
		        else:
		            print( '월급 인상자 입니다.' )
		
			이름을 입력하세요 ~scott
			고소득자 입니다.

	답2
		a = str( input( '이름을 입력하세요 ~' ) )
		import csv
		file = open("c:\\emp2.csv",'r')
		emp_csv = csv.reader(file)
		
		for emp_list in emp_csv:
		    if emp_list[1] == a.upper() and int(emp_list[5]) >= 3000:
		        print( '고소득자 입니다.' )
		    elif emp_list[1] == a.upper() and int(emp_list[5]) >= 2000:
		        print( '적당합니다.' )
		    elif  emp_list[1] == a.upper() and int(emp_list[5]) < 2000:
		        print( '월급 인상자 입니다.' )

			이름을 입력하세요 ~scott
			고소득자 입니다.



■ 11. for문 개념 배우기 ① (for)

	파이썬의 for문의 기본적인 구조는 다음과 같다.

	for 변수 in 리스트(또는 튜플, 문자열):
	    수행할 문장1
	    수행할 문장2

	리스트나 튜플, 문자열의 첫번째 요소부터 마지막 요소까지 차례로 변수에 대입되어 "수행할 문장 1"
	, "수행할 문장 2" 등이 수행된다.


	문법 : for 반복변수 in 순서열:
				↑
			      리스트 , 튜플, 딕셔너리
				[]	()	{}
		   실행문

	예제 : for i in (1, 2, 3):
		   print(i)

	예제 : for i in 'I am a boy':
		   print(i)


문제 13. 아래의 리스트에 있는 요소(값)들을 하나씩 뽑아서 출력하시오 !

	['7566', 'JONES', 'MANAGER', '7839', '1981-04-01', '2975', '0', '20']

	for i in ['7566', 'JONES', 'MANAGER', '7839', '1981-04-01', '2975', '0', '20']:
	    print( i )


문제 14. 숫자 1번부터 10000번까지 세로로 출력하시오 !
	for i in range(10001):
	    print(i+1)


문제 15. 아래와 같이 숫자 짝수를 출력하시오 !
	2
	4
	6
	8
	10

		for i in range(10):
		    if i%2 == 1:
		        print(i+1)


문제 16. 아래와 같이 결과를 출력하시오 
	1
	3
	5
	7
	9

		for i in range(10):
		    if i%2 == 1:
		        print(i)


문제 17. for loop문을 이용해서 숫자 1부터 10까지 출력하시오 !

	for i in range(1,11):		# range( 시작, 끝, 증가 )
	    print(i)

	1
	2
	3
	4
	5
	6
	7
	8
	9
	10

		설명 : 2씩 증가하고 싶으면 ?
			for i in range(1, 11, 2):
			    print(i)

>>>4*'k'

'kkkk'

>>>5*'★'

'★★★★★'



문제 18. 아래와 같이 결과를 출력하시오 !

	★
	★★
	★★★
	★★★★
	★★★★★
	★★★★★★
	★★★★★★★
	★★★★★★★★
	★★★★★★★★★

	for i in range(1,10):
	    print( i*'★' )


문제 19. 숫자를 물어보게 하고 숫자를 입력하면 ★이 출력되게 하시오 !

	숫자를 입력하세요 ~ 10

	★
	★★
	★★★
	★★★★
	★★★★★
	★★★★★★
	★★★★★★★
	★★★★★★★★
	★★★★★★★★★
	★★★★★★★★★★

	a = int(input('숫자를 입력하세요 ~'))

	for i in range(1,a+1):
	    print( i*'★' )


문제 20. 숫자를 물어보게 하고 숫자를 입력하면 ★이 아래와 같이 출력되게 하시오 !

	숫자를 입력하세요 ~10
	★★★★★★★★★★
	★★★★★★★★★
	★★★★★★★★
	★★★★★★★
	★★★★★★
	★★★★★
	★★★★
	★★★
	★★
	★

	a = int(input('숫자를 입력하세요 ~'))
	for i in range(a, 0, -1):
	    print( i*'★' )


문제 21. 아래와 같이 숫자를 두번 물어보게 하고 ★을 출력해서 사각형을 만드시오 !

	가로의 숫자를 입력하세요 ~5
	
	세로의 숫자를 입력하세요 ~6
	★★★★★
	★★★★★
	★★★★★
	★★★★★
	★★★★★
	★★★★★

	a = int(input('가로의 숫자를 입력하세요 ~'))
	b = int(input('세로의 숫자를 입력하세요 ~'))
	for i in range(b):
	    print( a*'★' )
	

문제 22. 아래와 같이 ★를 출력하시오 ! (댓글로 올리세요 ~ )

	     ★
	    ★★
	   ★★★
	  ★★★★
	 ★★★★★

	a = int(input('가로의 숫자를 입력하세요 ~'))
	for i in range(1,a+1):
	    print( (a-i)*' ', i*'★' )






























