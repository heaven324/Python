■ 1. 판다스 불러오기
import pandas as pd
import numpy as np







■ 2. 판다스 자료구조

	- Series, Data Frame


★ 2-1. Series 정의하기

	obj = pd.Series([4, 7, -5, 3])
	obj
	obj.values   							# Series의 값만 확인하기
	obj.index    							# Series의 인덱스만 확인하기
	obj.dtype    							# Series의 자료형 확인하기
	obj2 = pd.Series([4, 7, -5, 3], index=['d', 'b', 'a', 'c'])
	obj2         							# Series의 인덱스를 바꿀 수 있다.

	☆ python의 dictionary 자료형을 Series data로 만들 수 있다.
	☆ dictionary의 key가 Series의 index가 된다.


	sdata = {'Kim':35000, 'Beomwoo':67000, 'Joan':12000, 'Choi':4000}
	obj3 = pd.Series(sdata)
	obj3
	obj3.name = 'Salary'       		# Series의 이름을 변경할 수 있다.
	obj3.index.name = 'Names'  		# Series의 인덱스 이름을 지정할 수 있다.
	obj3
	obj3.index = ['A', 'B', 'C', 'D']  	# Series의 인덱스 변경
	obj3




★ 2-2. Data Frame

	Data Frame 정의하기
	이전에 DataFrame에 들어갈 데이터를 정의해주어야 하는데,
	이는 python의 dictionary 또는 numpy의 array로 정의할 수 있다.

		data = {'name': ['Beomwoo', 'Beomwoo', 'Beomwoo', 'Kim', 'Park'],
		        'year': [2013, 2014, 2015, 2016, 2015],
		        'points': [1.5, 1.7, 3.6, 2.4, 2.9]}
		df = pd.DataFrame(data)    # 행과 열 구조를 갖는 데이터가 생긴다.
		df
		df.index                   # 행방향의 인덱스
		df.columns                 # 열방향의 인덱스
		df.values                  # 값 얻기


	 * 각 인덱스에 대한 이름 설정하기
		df.index.name = 'Num'
		df.columns.name = 'Info'
		df


	DataFrame을 만들면서 columns와 index를 설정할 수 있다.
		df2 = pd.DataFrame(data, columns=['year','name', 'points','penalty'],\
		                   index=['one','two','three','four','five'])
		df2

	※ DataFrame을 정의하면서, data로 들어가는 python dictionary와 columns의 순서가 달라도 알아서 
	   맞춰서 정의된다.
	   하지만 data에 포함되어 있지 않은 값은 NaN(Not a Number)으로 나타나게 되는데,
	   이는 null과 같은 개념이다.
	   NaN값은 추후에 어떠한 방법으로도 처리가 되지 않는 데이터이다.
	   따라서 올바른 데이터 처리를 위해 추가적으로 값을 넣어줘야 한다.


	 * describe() 함수는 DataFrame의 계산 가능한 값들에 대한 다양한 계산 값을 보여준다.
		df2.describe()







■ 3. DataFrame Indexing

	data = {"names": ["Kilho", "Kilho", "Kilho", "Charles", "Charles"],
	           "year": [2014, 2015, 2016, 2015, 2016],
	           "points": [1.5, 1.7, 3.6, 2.4, 2.9]}
	df = pd.DataFrame(data, columns=["year", "names", "points", "penalty"],
	                          index=["one", "two", "three", "four", "five"])
	df


★ 3-1. DataFrame에서 열을 선택하고 조작하기

	df['year']     		# year열의 데이터를 출력
	df.year        		# 동일한 의미를 갖는, 다른 방법
	df[['year','points']]
	df['penalty'] = 0.5    	# 특정 열에 대해 위와 같이 선택하고, 우리가 원하는 값을 대입할 수 있다.
	df

	df['penalty'] = [0.1, 0.2, 0.3, 0.4, 0.5]   # python의 List나 numpy의 array(값을 넣음)
	df

	df['zeros'] = np.arange(5)
	df


	☆ Series를 추가할 수도 있다.

		val = pd.Series([-1.2, -1.5, -1.7], index=['two','four','five'])
		df['debt'] = val
		df

		하지만 Series로 넣을 때는 val와 같이 넣으려는 data의 index에 맞춰서 데이터가 들어간다.
		이점이 python list나 numpy array로 데이터를 넣을때와 가장 큰 차이점이다.


		df['net_points'] = df['points'] - df['penalty']
		df['high_points'] = df['net_points'] > 2.0
		df



	del df['high_points']     	# 열 삭제하기
	del df['net_points']
	del df['zeros']
	df

	df.columns			# 이름 붙이기
	df.index.name = 'Order'
	df.columns.name = 'Info'
	df




★ 3-2. DataFrame에서 행을 선택하고 조작하기

	pandas에서는 DataFrame에서 행을 인덱싱하는 방법이 무수히 많다.
	
	물론 위에서 소개했던 열을 선택하는 방법도 수많은 방법중에 하나에 불과하다.

	df[0:3]			# 0번째 부터 2(3-1) 번째까지 가져온다.
				# 뒤에 써준 숫자번째의 행은 뺀다.

 	df['two':'four']	# tow라는 행부터 four라는 행까지 가져온다.
				# 뒤에 써준 이름의 행을 빼지 않는다.

	df.loc['two']		# 아래 방법을 권장한다. 
				# .loc 또는 .iloc 함수를 사용하는 방법.
				# 반환 형태는 Series
	df.loc['two':'four']

	df.loc['two':'four', 'points']

	df.loc[:,'year'] # == df['year']

	df.loc[:,['year','names']]

	df.loc['three':'five','year':'penalty']

	df.loc['six',:] = [2013,'Jun',4.0,0.1,2.1]	# 새로운 행 삽입하기

	df.iloc[3]					# .iloc 사용:: index 번호를 사용한다.
		 					# 3번째 행을 가져온다.
	df.iloc[3:5, 0:2]

	df.iloc[[0,1,3], [1,2]]

	df.iloc[:,1:4]

	df.iloc[1,1]













■ 4. DataFrame에서의 boolean Indexing

	