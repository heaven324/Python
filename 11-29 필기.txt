■ 어제 배웠던 내용 복습

	1. 기초 통계 클래스 생성
		- 중심성향을 나타내는 대표값들을 함수로 구성
		- 히스토그램 그래프, 사분위수 그래프

	2. 상속
		- 파이썬 코드 작성시 상속이 필요한 이유?

			현대카드의 공통 내규에 충실

				Card (공통)

		Movie card			Mart card	................
	(신한카드 스타일로 개발)	(국민카드 스타일로 개발)

		" 업무에 가장 중요한 핵심 기능(엔진)을 공통으로 만들고 다른 sub업무 기능 구현시
		  상속받아서 쓸 수 있게 하려고 "

	- 상속 사용시 주의할 점?	다중 상속시 죽음의 다이아몬드 상속이 되지 않도록 구현

		super()







	--- super() 와 관련하여 문제 생성 스크립트

	class Card:
	    def __init__(self):
	        self.card = 0
	        print('카드가 발급 되었습니다.')
	    def charge(self, num):
	        self.card += num
	        print('{}원 충전되었습니다.'.format(num))
	    def consume(self, num, loc):
	        if self.card <= num:
	            print('잔액이 부족합니다.')
	        else:
	            print('{}에서 {}원 사용했습니다.'.format(loc, num))
	            self.card -= num
	    def print(self):
	        print('잔액이 {}원 입니다.'.format(self.card))
	
	
	class m_card(Card):
	    def consume(self, num, loc):
	        if loc == '영화관':
	            num = num*0.8
	        super().consume(num,loc)
	
	class t_card(Card):
	    def consume(self, num, loc):
	        if loc == '마트':
	            num = num*0.9
	        super().consume(num,loc)
	
	class movie_mart_trans_card(m_card,t_card):
	    def consume(self, num, loc):
	        if loc == '교통':
	            num = num*0.5	
	        super().consume(num,loc)








■ 55. 예외처리 이해하기 ① (try ~ except)

	예외 ?

		"프로그램에서 에러가 발생했을 때, 에러를 처리하는 기능"

	예제 :
		def my_divide():
		    x = input(' 분자의 숫자를 입력하세요 ~')
		    y = input(' 분모의 숫자를 입력하세요 ~')
		    return int(x)/int(y)
		
		print( my_divide() )

		 분자의 숫자를 입력하세요 ~10
		
		 분모의 숫자를 입력하세요 ~2
		5.0

	분모에 만약 0을 넣은다면 ZeroDivisionError: division by zero 에러가 난다
	근데 이것은 코드의 에러가 아니라서 보기 편한 메세지로 에러 화면을 바꾸자!

	예 : 홈플러스 계산원분이 고객의 홈플러스 카드가 단말기에서 오류메세지가 나온다면?
	     


문제 203. 위의 코드에 예외 처리 코드를 입혀서 분모를 0으로 입력해서 위와 같은 에러가 나오면 
	  "나누기를 할 수 없습니다." 라는 메세지가 출력되게 하시오 !

	def my_divide():
	    try:
	        x = input(' 분자의 숫자를 입력하세요 ~')
	        y = input(' 분모의 숫자를 입력하세요 ~')
	        return int(x)/int(y)
	    except:
	        return '나누기를 할 수 없습니다.'
	
	print( my_divide() )

	 분자의 숫자를 입력하세요 ~10
	
	 분모의 숫자를 입력하세요 ~0
	나누기를 할 수 없습니다.

	설명 : try:
	           # 문제가 없을 경우 실행할 코드
	       except:
		   # 문제가 생겼을 경우 실행할 코드



문제 204. 이름을 물어보게 하고 이름을 입력하면 해당 사원의 월급이 출력되는 함수를 생성하시오 !
	  (emp.csv와 pandas를 이용해서)

def find_sal():
    import pandas as pd
    emp = pd.DataFrame.from_csv('c:\\emp.csv')
    name = input('월급을 알고 싶은 사원명을 입력하세요 ~ ')
    sal = emp [ ['sal'] ] [ emp['ename'] == name.upper()].values[0] 	# 3000만 가지고오려면 values[0]을 
    return sal								  써야함

print( find_sal())




문제 205. 위의 코드를 수정해서 사원명을 입력했을 때 없는 사원이름을 입력하면 에러가 나는게 아니라 아래의
	  메세지가 나오게끔 예외처리를 하시오 !

	def find_sal():
	    import pandas as pd
	    emp = pd.DataFrame.from_csv('c:\\emp.csv')
	    name = input('월급을 알고 싶은 사원명을 입력하세요 ~ ')
	    try:
	        sal = emp [ ['sal'] ] [ emp['ename'] == name.upper()].values[0]
	        return sal
	    except:
	        return '해당사원은 없습니다.'
	
	print( find_sal())

	월급을 알고 싶은 사원명을 입력하세요 ~ WJDTJDGH
	해당사원은 없습니다.

		아무것도 안넣고 프로그램을 돌리면 "해당사원은 없습니다." 라고 뜨는데 아무것도 안넣고
		엔터를 치면 계속 물어보게 할 수 있는 코드를 많이 사용한다



문제 206. while loop 문을 이용해서 이름을 물어봤을 때 아무것도 안넣고 그냥 엔터를 치면 계속 물어보게
	  하시오 !

	def find_sal():
	    import pandas as pd
	    emp = pd.DataFrame.from_csv('c:\\emp.csv')
	    while True:
	        name = input('월급을 알고 싶은 사원명을 입력하세요 ~ ')
	        if name != '':
	            break
	    try:
	        sal = emp [ ['sal'] ] [ emp['ename'] == name.upper()].values[0]
	        return sal
	    except:
	        return '해당사원은 없습니다.'
	
	print( find_sal())

	월급을 알고 싶은 사원명을 입력하세요 ~ 
	월급을 알고 싶은 사원명을 입력하세요 ~ 
	월급을 알고 싶은 사원명을 입력하세요 ~ 
	월급을 알고 싶은 사원명을 입력하세요 ~ 
	월급을 알고 싶은 사원명을 입력하세요 ~ 
	월급을 알고 싶은 사원명을 입력하세요 ~ 
	월급을 알고 싶은 사원명을 입력하세요 ~ 
	월급을 알고 싶은 사원명을 입력하세요 ~ a
	해당사원은 없습니다.



문제 207. 위의 코드를 수정해서 이름을 물어볼 때 숫자를 입력하면 숫자는 입력할 수 없습니다. 라는 메세지가
	  출력되게 하시오 1

	  없는 사원 이름을 입력하면 "해당 사원 없습니다."
	  숫자를 입력하면 " 숫자는 입력할 수 없습니다."

	내답 :
		def find_sal():
		    import pandas as pd
			    emp = pd.DataFrame.from_csv('c:\\emp.csv')
		    while True:
		        name = input('월급을 알고 싶은 사원명을 입력하세요 ~ ')
		        if name != '':
		            break
		    try:
			        sal = emp [ ['sal'] ] [ emp['ename'] == name.upper()].values[0]
	        return sal
		    except:
		        try:
			            a = int(name)
	            return '숫자는 입력할 수 없습니다.'
		        except:
		            return '해당사원은 없습니다.'
		
		print( find_sal())

	업그레이드(한솔) 답:
		def find_sal():
		    import pandas as pd
		    emp = pd.read_csv("D:\\emp_pandas.csv")
		    name = input('월급을 알고 싶은 사원명을 입력 하세요~')
		    while name == '' or (name in i for i  in range(0,10)):
		        if name == '':
	        	    name= input('월급을 알고 싶은 사원명을 입력 하세요~')
	        	else:
	            print('숫자는 입력할 수 없습니다.')
	            name = input('월급을 알고 싶은 사원명을 입력 하세요~')
		    try:
		        sal = emp[['sal']][emp['ename']==name.upper()].values[0]
		        return sal
		    except:
		        return '해당 사원은 없습니다.'
		
		find_sal()







■ 56. 예외처리 이해하기 ② (try ~ except ~ else)

	예제 : 
		try:
		    실행할 코드블럭
		except:
		    예외 처리 코드 블럭
		else:
		    except절을 만나지 않았을 경우 실행할 코드 블럭



	예제(문제 205 수정) :
		def find_sal():
		    import pandas as pd
		    emp = pd.DataFrame.from_csv('c:\\emp.csv')
		    name = input('월급을 알고 싶은 사원명을 입력하세요 ~ ')
		    try:
		        sal = emp [ ['sal'] ] [ emp['ename'] == name.upper()].values[0]
			# 반드시 수행이 되어야 하는 중요한 코드를 처리해야 else 이후에 다른 코드들이 
			# 돌고 싶게 하고 싶을 때 사용

		    except:
		        return '해당사원은 없습니다.'
		    else:					# 추가
		        print('월급 추출에 성공했습니다.')
		        return sal				# 리턴 자리 변경
		
		print( find_sal())

		월급을 알고 싶은 사원명을 입력하세요 ~ scott
		월급 추출에 성공했습니다.
		[3000]


	try와 except 사이의 코드가 문제가 없다는 것을 확실히 눈으로 확인하고 넘어갈 수 있다
	(else 문으로 넘어간다) 는 장점이 있다.








■ 복수개의 except절 사용하기

	" 예외처리를 여러개를 나열 할 수 있다."

	예제 : 아래의 두 수를 나누는 코드는 작성하는데 아래의 두가지가 다 실행되게 하시오 !

	분자 숫자를 입력하세요 ~ 10
	분자 숫자를 입력하세요 ~ 0
	0으로 나눌 수 없습니다.

	분자 숫자를 입력하세요 ~ 10
	분자 숫자를 입력하세요 ~ aaa
	나눌 수 없습니다.


	코드 :
		def my_divide():
		    try:
		        x = input ('분자 숫자를 입력하세요~ ')
		        y = input ('분모 숫자를 입력하세요~ ')
		        z = int(x)/int(y)
		        return z
		    except ZeroDivisionError:			# 0으로 나눌때의 예외처리
		        return ('0으로 나눌 수 없습니다.')
		    except KeyboardInterrupt:
		        return( '사용자에 의해서 프로그램이 종료됩니다.')
			#ctrl + c <------- 를 누르면 
		    except:
		        return ('나눌 수 없습니다.')
		    
		print(my_divide())

	다른 예외처리 절 : 구글링~






문제 208. 문제 131번의 번역할 수 없습니다를 예외처리로 구현하시오 !

	번역할 한글을 입력하세요 ~나는 소년 이다
	I am boy 

	번역할 한글을 입력하세요 ~나는 옷을 입습니다
	번역할 수 없습니다.

	dic = {}
	
	import csv
	file = open("c:\\smt_dic.csv","r")
	dic_csv = csv.reader(file)
	
	for dic_list in dic_csv:
	    dic[dic_list[1]] = (dic_list[3], int(dic_list[4]) )
	
	a = []
	result = ''
	input_kor = input ( '번역할 한글을 입력하세요 ~' )
	input_list = input_kor.split(' ')
	try:
	    for i in input_list:
	        a.append([dic[i][1], dic[i][0]])
	    a.sort()
	    for i in a:
	        result += i[1] + ' '
	except:
	    print('번역할 수 없습니다.')
	print(result)








■ 57. 예외처리 이해하기 ③ (try ~ except ~ finally)

	예제 : 
		try:
		    실행할 코드 블럭
		except:
		    예외처리 코드 블럭
		finally:
		    실행할 코드가 성공했든 실패했든 무조건 실행돠는 블럭

	코드 : 이름을 물어보게 하고 이름을 입력하면 월급이 출력되는 코드

		def find_sal():
		    import pandas as pd
		    emp = pd.DataFrame.from_csv('c:\\emp.csv')
		    name = input('월급을 알고 싶은 사원명을 입력하세요 ~ ')
		    try:
		        sal = emp [ ['sal'] ] [ emp['ename'] == name.upper()].values[0]
		        return sal
		    except:
		        return '해당사원은 없습니다.'
		    finally:
		        print('저는 무조건 실행됩니다.')
		
		print( find_sal())

		월급을 알고 싶은 사원명을 입력하세요 ~ scott
		저는 무조건 실행됩니다.
		[3000]

		월급을 알고 싶은 사원명을 입력하세요 ~ wjdtjdgh
		저는 무조건 실행됩니다.
		해당사원은 없습니다.


문제 209. 두 숫자를 물어보게 해서 두 수를 나누는 함수를 실행할 때 성공하던 실패하던 아래의 메세지가
	  무조건 출력되게 하시오 !

	def my_divide():
	    try:
	        x = input(' 분자의 숫자를 입력하세요 ~')
	        y = input(' 분모의 숫자를 입력하세요 ~')
	        z = int(x)/int(y)
	        print(z)
	    except:
	        print( '나누기를 할 수 없습니다.' )
	    finally:
	        print('정성호가 만든 프로그램입니다.')
	        
	my_divide() 




■ 58. 예외처리 이해하기 ④ (try ~ except Exception as e)

	"코드상의 오류를 출력할 때 사용"
		try문에서는 오류가 나면 except문을 사용하기 때문에 어떤 오류인지 확인할 수가 없기
		때문에 오류를 확인하기 위해서 활용한다.

	예제 :
		try:
		    print(param)
		except Exception as e:
		    print(e)

		name 'param' is not defined	<------ 위의 코드가 실패한 이유를 보여주고 있다.



문제 210. 문제 132번 코드에서 코드상의 오류를 발생시키고 프로그램을 실행해 보시오 !

	def my_divide():
	    try:
	        x = input(' 분자의 숫자를 입력하세요 ~')
	        y = input(' 분모의 숫자를 입력하세요 ~')
	        z = int(x)/int(y)
	        return k
	    except Exception as e:
	        print(e)
	    finally:
	        print('정성호가 만든 프로그램입니다.')
	        
	my_divide()








■ 59. 사용자 정의 예외 처리

	"파이썬 입장에서 봤을때는 오류가 아닌데 프로그래머가 이건 오류이다 라고 일부러
	 프로그램이 안돌게 만들게 오류 메세지를 출력하게 되는 경우에 사용한다."

	금액이 안맞는 프로그램이 있다면 <----- 사고(코드 오류)


	예제 : 
		def 함수명:
		    실행코드

		    if 어떤 조건:
		        raise Exception('예외가 발생했습니다.')
		    else:
		        return 변수명



문제 211. 이름을 물어보게 하고 이름을 입력하면 해당사원의 월급이 출력되게 하는 파이썬 코드를 작성하는데
	  월급이 3000 이상인 사원들은 아래의 메세지가 출력되게 하시오 !

		" 해당 사원의 월급은 볼 수 없습니다."

	def find_sal():
	    import pandas as pd
	    emp = pd.DataFrame.from_csv('c:\\emp.csv')
	    name = input('월급을 알고 싶은 사원명을 입력하세요 ~ ')
	    sal = emp [ ['sal'] ] [ emp['ename'] == name.upper()].values[0]
	    if sal >= 3000:
	        raise Exception('해당 사원의 월급은 볼 수 없습니다.')
	    else:
	        return sal
	
	print( find_sal())

	월급을 알고 싶은 사원명을 입력하세요 ~ scott
	
	Exception: 해당 사원의 월급은 볼 수 없습니다.








■ 60. 사용자 입력받기 (input)

	예제 : 
		k = input('<값>을 입력하세요 : ')
		
		print( '당신이 입력한 값은 <'+ k +'> 입니다.')
	









■ 61. 자료형 확인하기 (type)

	예제 : 
		numdata = 57
		strdata = '파이썬'
		listdata = [1,2,3]
		dicdata = {'a':1,'b':2}
		
		def func():
		    print('안녕하세요')
		    
		print(type(numdata))
		print(type(strdata))
		print(type(listdata))
		print(type(dicdata))
		print(type(func))










■ 62. 나눗셈에서 나머지만 구하기 (%)

	예제 : 
		a = 11113
		b = 23
		ret = a%b
		print(ret)

		4


문제 212. 위의 코드를 수정해서 아래와 같이 결과를 출력하시오 !

	첫번째 숫자를 입력하세요~ 11113
	
	두번째 숫자를 입력하세요~ 23
	11113를 23로 나누면 4가 나머지로 남습니다.


		a = int(input('첫번째 숫자를 입력하세요~ '))
		b = int(input('두번째 숫자를 입력하세요~ '))
		ret = a%b
		print('%d를 %d으로 나누면 %d가 나머지로 남습니다.' %(a,b,ret))
	






■ 63. 몫과 나머지 구하기 (divmod)

	예제 : 
		a = 11113
		b = 23
		re1, ret2 = divmod(a, b)   # 몫, 나머지
		 ↑   ↑
		 몫  나머지

		print (ret1, ret2)








■ 64. 이진 탐색 알고리즘

문제 213. 순차 탐색 알고리즘을 파이썬으로 프로그래밍 하시오 !

	data = [1, 7, 11, 12, 14, 23, 44, 47, 51, 64, 67, 77, 140, 672, 871]
		0  1  2    3   4  5    6   7  8   9   10  11   12   13   14
	
	sequence_search(data,7)
	'숫자 7이 있습니다.'
	sequence_search(data,70)
	'숫자 70이 없습니다.'
	
	
	def sequence_search(data, num):
	    for i in data:
	        if i == num:
	            result = "숫자 %d이 있습니다."%num
	            break
	        else:
	            result = "숫자 %d이 없습니다."%num
	    return result



문제 213. 이진 탐색 알고리즘을 파이썬으로 프로그래밍 하시오 !

	binary_search(data,7)
	'숫자 7이 있습니다.'
	binary_search(data,70)
	'숫자 70이 없습니다.'

	def binary_search(data, num):
	    import numpy as np                             # 메디안쓰기위해 넘파이 로드
	    data.sort()                                    # 데이터 정렬
	    while True:                                    # 반복
	        if len(data) == 1:                         # 만약 데이터리스트에 원소가 1개라면
	            if data[0] == num:                     # 만약 그 데이터의 값이 num과 같다면
	                return '숫자 %d이 있습니다.'%num   # 값을 찾은것이니 출력
	                break                              # 끝났으니 나가기
	            else:                                  # 만약 그 데이터의 값이 num과 같지않다면
	                return '숫자 %d이 없습니다.'%num   # 값이 없는것이니 출력
	                break                              # 끝났으니 나가기
	        a = np.array(data)                         # 중앙값 구하기 1
	        medi = int(np.median(a))                   # 중앙값 구하기 2     중앙값 : medi
	        if len(data)%2 == 0:                       # 만약 데이터의 길이가 짝수라면
	            data_medi_index = int(len(data)/2)     # 중앙 값의 인덱스
	            if num < medi:                         # 만약 데이터가 중앙값보다 작다면
	                data = data[:data_medi_index]      # 중앙값 뒤의 데이터를 날림
	            else:                                  # 만약 데이터가 중앙값보다 크다면
	                data = data[data_medi_index:]      # 중앙값 앞의 데이터를 날림        
	        else:                                      # 만약 데이터의 길이가 홀수라면
	            data_medi_index = int(len(data)/2)     # 중앙값의 인덱스
	            if num < medi:                         # 만약 데이터가 중앙값 보다 작다면
	                data = data[:data_medi_index]      # 중앙값(포함) 뒤의 데이터를 날림
	            elif num > medi:                       # 만약 데이터가 중앙값 보다 크다면
	                data = data[data_medi_index+1:]    # 중앙값(포함) 앞의 데이터를 날림
	            else:                                  # 만약 데이터가 중앙값과 일치한다면
	                return '숫자 %d이 있습니다.'%num   # 값을 찾은것이니 출력
	                break                              # 끝났으니 나가기
	 
	# while True문을 이용하되 결과가 출력되어야 하는 모든 부분에 break를 걸어서 무한루프가 되지 
	  않게 한다.
	
	# 리스트의 길이가 만약 짝수라면 중앙값이 리스트 안에 있지 않기 때문에 짝수 일 경우와 홀수 일 
	  경우로 나눠야 한다.
	
	# 짝수일 경우 중앙값이 데이터안에 있을 수 없으므로 같다는 조건은 생략이 가능하다.
	
	# 홀수일 경우 크거나 같다, 작거나 같다 보다는 크다 작다를 이용해 중앙값까지 같이 날리는것이 
	  효율이 더 좋다.
	
	# 결과값이 출력되는 경우의수 1. 우연히 중앙값과 같게 되었을 때 2. 리스트의 원소를 1개까지 
	  줄인다음 확인
	
	# idea : 만약 리스트가 1개라면? 모든 루프 돌지말고 바로 끝내기 위해 1개일 경우를 제일 위로





