문제 414. (탐욕 알고리즘) 탐욕 알고리즘을 이용하여 금액과 화폐가 주어졌을 때 가장 적은 화폐로 지불하시오 !

"탐욕 알고리즘이 어떤 알고리즘이냐면, 매 순간마다 최선의 선택하는것 입니다. 
 즉, 선택할때마다 가장 좋다고 생각되는 것을 선택해나가며 
 최종적인 해답을 구하는 알고리즘 입니다. 
 이 알고리즘을 설계할 때 유의할 점은 전체를 고려하는게 아니라 문제를 부분적으로 나누어, 나누어진 문제에 대한 최적의 
 해답을 구하므로 전체적인 최적의 해가 될 수 있는 경우가 존재합니다. "
  최단 거리 알고리즘 구현하기 위해서 필요한 알고리즘이
                "탐욕(greedy) 알고리즘 "


액수 입력: 362

화폐단위를 입력하세요 : 1 50 100

결과 :
100원 :3개
50원 : 1개
1원 : 12개 


참고 스크립트 :

money = int(input('액수입력 : '))
cash_type = [int(x) for x in input('화폐단위를 입력하세요 : ').split(' ')]
res = coinGreedy(money,cash_type)
for key in res:
    print('{0}원 : {1}개'.format(key,res[key]))


	답 : 

		def greedy():
		    money = int(input('액수를 입력하세요 !'))
		    cash_type = [int(x) for x in input('화폐단위를 입력하세요 : ').split(' ')]
		    cash_type.sort(reverse=True)
		    li = []
		    match = []
		    for i in cash_type:
		        match.append([i,0])
		    end = True
		    while end:
		        value = 0
		        match[len(match)-1][1] += 1
		        for i in match:
		            value += i[0]*i[1]
		        if value == money:
		            for k in match:
		                li.append(k[1])
		        for j in range(len(match)-1,-1,-1):
		            if match[j][1] > 24//match[j][0]:
		                match[j][1] = 0
		                match[j-1][1] += 1
		                if j == 0:
		                    end = False
		    sumsum = 0
		    sum_li = []
		    for i in range(0, len(li), len(cash_type)):
		        sumsum = li[i]+li[i+1]+li[i+2]
		        sum_li.append(sumsum)
		    min_li = min(sum_li)
		    result = [li[3*sum_li.index(min_li)],li[3*sum_li.index(min_li)+1],li[3*sum_li.index(min_li)+2]]
		    for i in range(len(cash_type)):
		        print('%d원 동전 %d개'%(cash_type[i], result[i]), end = '  ')
		
		greedy()







문제 415. (탐욕 알고리즘) 아래와 같이 결과가 출력되게 하시오 !
	  동전의 개수를 최소로 나오게 출력






# 카카오 알고리즘 문제
#문제 43. 오늘 마지막 문제로 검사 받아야할 알고리즘 문제 13번 (카카오 2017년 3번 문제 : LRU알고리즘)
# city = ["Jeju", "Pangyo", "Seoul", "NewYork", "LA", "Jeju", "Pangyo", "Seoul", "NewYork", "LA"] # cache 3 50
# city = ["Jeju", "Pangyo", "Seoul", "Jeju", "Pangyo", "Seoul", "Jeju", "Pangyo", "Seoul"] # cache 3 21
# city = ["Jeju", "Pangyo", "Seoul", "NewYork", "LA", "SanFrancisco", "Seoul", "Rome", "Paris", "Jeju", "NewYork", "Rome"] # cache 2 60
# city = ["Jeju","Pangyo", "Seoul", "NewYork", "LA", "SanFrancisco", "Seoul", "Rome", "Paris", "Jeju", "NewYork", "Rome"] # cache 5 52
# city = ["Jeju","Pangyo", "NewYork", "newyork"] # cache 2 16
# city = ["Jeju", "Pangyo", "Seoul", "NewYork", "LA"] # cache 0 25
city = ['a','b','c','a','e','d','a'] # 3
def LRU(city):
    cache_size = int(input('캐시 사이즈를 입력하세요 !'))
    cache_hit = 1
    cache_miss = 5
    cache = []
    time = 0
    for i in city:
        i = i.lower()
        if cache_size == 0:
            time = len(city)*cache_miss
            break
        elif len(cache) < cache_size:
            cache.append(i)
            time += cache_miss
        else: 
            if cache.count(i) >= 1:
                time += cache_hit
                pass
            else:
                del cache[0]
                cache.append(i)
                time += cache_miss
    return time
print(LRU(city))








# 카카오 알고리즘 문제
#문제 43. 오늘 마지막 문제로 검사 받아야할 알고리즘 문제 13번 (카카오 2017년 3번 문제 : LRU알고리즘)
# city = ["Jeju", "Pangyo", "Seoul", "NewYork", "LA", "Jeju", "Pangyo", "Seoul", "NewYork", "LA"] # cache 3 50
# city = ["Jeju", "Pangyo", "Seoul", "Jeju", "Pangyo", "Seoul", "Jeju", "Pangyo", "Seoul"] # cache 3 21
# city = ["Jeju", "Pangyo", "Seoul", "NewYork", "LA", "SanFrancisco", "Seoul", "Rome", "Paris", "Jeju", "NewYork", "Rome"] # cache 2 60
# city = ["Jeju","Pangyo", "Seoul", "NewYork", "LA", "SanFrancisco", "Seoul", "Rome", "Paris", "Jeju", "NewYork", "Rome"] # cache 5 52
# city = ["Jeju","Pangyo", "NewYork", "newyork"] # cache 2 16
# city = ["Jeju", "Pangyo", "Seoul", "NewYork", "LA"] # cache 0 25

# 원래의 결과와 달라지는 예제 ! 원래의 결과 31
city = ['a','b','c','a','e','d','a'] # 3
def LRU(city):
    cache_size = int(input('캐시 사이즈를 입력하세요 !'))
    cache_hit = 1
    cache_miss = 5
    cache = []
    time = 0
    for i in city:
        i = i.lower()
        if cache_size == 0:
            time = len(city)*cache_miss
            break
        elif len(cache) < cache_size:
            cache.append(i)
            time += cache_miss
        else: 
            if cache.count(i) >= 1:
                time += cache_hit
                cache.remove(i)
                cache.append(i)
            else:
                del cache[0]
                cache.append(i)
                time += cache_miss
    return time
print(LRU(city))



def solution(cache_size, city):
    cache_hit = 1
    cache_miss = 5
    time = 0
    if cache_size == 0:
        time = len(city)*cache_miss
        return time
    cache = []
    for i in city:
        i = i.lower()
        if cache.count(i) >= 1:
            time += cache_hit
            cache.remove(i)
            cache.append(i)
            pass
        else:
            if cache == []:
                pass
            else:
                del cache[0]
            cache.append(i)
            time += cache_miss
            pass
    return time




# 카카오 알고리즘 문제

#**********************cpu 적재방식 구조를 따라 만든 코드**************************

#문제 43. 오늘 마지막 문제로 검사 받아야할 알고리즘 문제 13번 (카카오 2017년 3번 문제 : LRU알고리즘)
city1 = ["Jeju", "Pangyo", "Seoul", "NewYork", "LA", "Jeju", "Pangyo", "Seoul", "NewYork", "LA"] # cache 3 50
city2 = ["Jeju", "Pangyo", "Seoul", "Jeju", "Pangyo", "Seoul", "Jeju", "Pangyo", "Seoul"] # cache 3 21
city3 = ["Jeju", "Pangyo", "Seoul", "NewYork", "LA", "SanFrancisco", "Seoul", "Rome", "Paris", "Jeju", "NewYork", "Rome"] # cache 2 60
city4 = ["Jeju","Pangyo", "Seoul", "NewYork", "LA", "SanFrancisco", "Seoul", "Rome", "Paris", "Jeju", "NewYork", "Rome"] # cache 5 52
city5 = ["Jeju","Pangyo", "NewYork", "newyork"] # cache 2 16
city6 = ["Jeju", "Pangyo", "Seoul", "NewYork", "LA"] # cache 0 25

# 원래의 결과와 달라지는 예제 ! 원래의 결과 31, 답 : 27
city7 = ['a','b','c','a','e','d','a'] # 3
def LRU(city):
    cache_size = int(input('캐시 사이즈를 입력하세요 !'))
    cache_hit = 1
    cache_miss = 5
    cache = {}
    time = 0
    cnt = 0
    for i in city:
#         print(i)
        cnt += 1
#         print(cnt)
        i = i.lower()
        if cache_size == 0:
            time = len(city)*cache_miss
            break
        elif len(cache) < cache_size:
            cache[i] = cnt
#             print(cache.items(), '현재 time', time)
            time += cache_miss
        else: 
            if i in cache:
                time += cache_hit
                cache[i] = cnt
#                 print('있어서 ',cache.items(), '현재 time', time)
            else:
                del cache[min(cache.items(), key=lambda x: x[1])[0]]
                cache[i] = cnt
                time += cache_miss
#                 print('없어서 ',cache.items(), '현재 time', time)
#         print('============================')
    return time
# print(LRU(city))
print('결과 = ', LRU(city1))
print('결과 = ', LRU(city2))
print('결과 = ', LRU(city3))
print('결과 = ', LRU(city4))
print('결과 = ', LRU(city5))
print('결과 = ', LRU(city6))
print('결과 = ', LRU(city7))










#문제 83. (카카오 비밀지도 문제)

n = 5
arr1 = [9, 20, 28, 18, 11]
arr2 = [30, 1, 21, 17, 28]
    
# n = 6
# arr1 = [46, 33, 33, 22, 31, 50]
# arr2 = [27, 56, 19, 14, 14, 10]

result = []
for i in range(n):
    result_str = bin(arr1[i]|arr2[i]+2**n)[3:]
    result_str1 = result_str.replace('1', '#')
    result_str2 = result_str1.replace('0', ' ')
    result.append(result_str2)
print(result)












■ 문제3. 동명이인 찾기
https://thebook.io/006935/part01/ch03/

#n명의 사람 이름 중에서 같은 이름을 찾아 집합으로 만들어 돌려주는 알고리즘을 만들어 보세요.

def find_same_name(data):			# 함수로 만들어 봅시다
    same_name = []				# 동명이인 데이터를 담을 변수 생성 (same_name)
    if len(data) == len(list(set(data))):	# (설명 1) 동명이인이 없을 경우의 수행
        print('동명이인이 없습니다.')
    else:					# 동명이인이 있을 경우의 수행
        data.sort()				# 동명이인데이터가 서로 붙을 수 있게 정렬을 사용
        for i in range(len(data)-1):		# (설명 2)
            if data[i] == data[i+1]:		# 인접한 데이터가 동일한 데이터인지 비교
                same_name.append(data[i])	# 동일하다면 동명이인이기 때문에 same_data에 데이터 추가
    same_name = set(same_name)			# (설명 3)
    return same_name				# 결과를 출력 !


name_list = ['Tom', 'Jerry', 'Mike', 'Tom']
print(find_same_name(name_list))


	※ 설명 1 : 만약 그냥 데이터의 길이와 중복을 제거한 데이터의 길이가 같다면 같은데이터(동명이인)이 
		    없는 것이므로 '동명이인이 없습니다'를 출력합니다

	※ 설명 2 : 동명이인이 있는경우 정렬을 한다면 동명이인 데이터가 서로 인접하게
		    됩니다. 그래서 버블정렬에 아이디어를 얻어서 붙은 데이터가 만약에 같은 데이터라면
		    same_name변수에 담습니다.

	※ 설명 3 : 생각해봅시다.만약에요. 저 리스트에 Tom이 3명 이상이라면? same_data에 Tom이 두번이상 
		    들어갑니다. 그렇기 때문에 same_name을 중복제거 해주면 원하는 결과가 나올겁니다.


■ 문제3. 하노이의 탑
https://thebook.io/006935/part02/ch06/











■ 최단 거리



# input_short = input('집, 미용실, 슈퍼마켓, 영어학원, 레스토랑, 은행, 학교 중 출발지 선택 ')

# 기본 예제 
short = {}
short[0] = [0,5,10,9,999,999,999]
short[1] = [5,0,3,999,999,11,999]
short[2] = [10,3,0,7,3,10,999]
short[3] = [9,999,7,0,999,7,12]
short[4] = [999,999,3,999,0,4,999]
short[5] = [999,11,10,7,4,0,2]
short[6] = [999,999,999,12,999,2,0]

# 안된다고 했던 예제
# short = {}
# short[0] = [0,5,10,6,999,999,999]
# short[1] = [5,0,3,999,999,11,999]
# short[2] = [10,3,0,7,3,10,999]
# short[3] = [6,999,7,0,999,7,2]
# short[4] = [999,999,3,999,0,4,999]
# short[5] = [999,11,10,7,4,0,2]
# short[6] = [999,999,999,2,999,2,0]

import pandas as pd
path2 = pd.DataFrame(short)
# print(path2)
# print('=======================')
# 1차 가능한 path 생성
path_list = [ [],[] ]
for i in range(len(path2[0])):
    if path2[0][i] > 0 and path2[0][i] < 999:
        path_list[0].append(path2[0][i])
        path_list[1].append([0, i])
# print('1차 path ', path_list)
while True:
#     print('-----------------------------')
    # path_list에서 가장 길이가 짧은 path를 다시사용하기 위해 따로 저장
    short_path = []
    short_path.append(min(path_list[0]))
    short_path.append(path_list[1][path_list[0].index(min(path_list[0]))])
#     print(short_path)
    
    # path_list에서 유효path를 dequeue
    path_list[1].remove(path_list[1][path_list[0].index(min(path_list[0]))])
    path_list[0].remove(min(path_list[0]))
#     print(path_list)

    # 필요없는 path dequeue시키는 for문 
    for i in range(len(path2[short_path[1][-1]])):
        if path2[short_path[1][-1]][i] < 999 and i not in short_path[1]:  # 왔던길 제외
            match_list = []
            for k in range(len(path_list[1])):
                match_list.append(path_list[1][k][-1])
            if i not in match_list: # 현재 추가할 path와 목적지가 동일한 path가 없는 경우
                tmp_list = []
                for j in short_path[1]:
                    tmp_list.append(j)
                tmp_list.append(i)
                path_list[0].append(path2[short_path[1][-1]][i]+short_path[0])
                path_list[1].append(tmp_list)
            else: # 현재 추가할 path와 목적지가 동일한 path가 있는 경우
                now_path_range = path2[short_path[1][-1]][i]+short_path[0]
                if now_path_range < path_list[0][match_list.index(i)]: # 현재의 path가 더 효율적인 path인 경우
                    tmp_list = []                                      # 원래있던 path를 빼고 현재 path를 추가
                    for j in short_path[1]:
                        tmp_list.append(j)
                    tmp_list.append(i)
                    path_list[0].append(path2[short_path[1][-1]][i]+short_path[0])
                    path_list[1].append(tmp_list)
                    path_list[0].remove(path_list[0][match_list.index(i)])
                    del path_list[1][match_list.index(i)]
    if short_path[1][-1] == 6: # short_path가 목적지인 경우 빠져나가기
        break

print(short_path[0])
