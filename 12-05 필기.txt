■ 어제 배운 내용 복습

	1. Text_mining클래스 생성
			- 워드 클라우드
			- 단어 검색
			- 긍정, 부정 단어 빈도수

		모듈 : Text_mining.py
		       표로 정리해서 이력서 첨부할 수 있도록 생성

	2. 알고리즘 문제 
		(1) 순차 탐색
		(2) 이진 탐색
		(3) 버블 정렬
		(4) 삽입 정렬







■ 84. 문자열이 알파벳인지 검사하기(isalpha)

	* 설명 :	1. 알파벳이 맞는지 확인 : isalpha
			2. 숫자가 맞는지 확인   : is digit
			3. 공백이 맞는지 확인   : isspace



문제 269. 겨울왕국 대본에 알파벳 문자의 갯수가 어떻게 되는가?

	text_file = open('c:\\winter.txt')
	lines = text_file.readlines()		# 텍스트 파일을 한줄씩 읽기
	total = 0
	
	for s in lines:
	    cnt = sum( i.isalpha() for i in s)
	    print(s, cnt)
	    total = total + cnt
	    
	print(total)

	82180

		※ lines : [' "Final Shooting Draft\n',
				 'by\n',
				 'Jennifer Lee\n',
				 '9/23/13\n',
				 'Property of the Walt Disney Animation Studios\n' ........]
			겨울왕국 대본을 한라인씩 리스트의 요소로 담아냄



문제 270. 겨울왕국 대본에 숫자가 몇개 있는지 출력하시오 !

	text_file = open('c:\\winter.txt')
	lines = text_file.readlines()
	total = 0
	
	for s in lines:
	    cnt = sum( i.isdigit() for i in s)
	    print(s, cnt)
	    total = total + cnt
	    
	print(total)

	264










■ 85. 문자열이 숫자인지 검사하기(isdigit)


문제 271. 셜록홈즈 대본에는 숫자가 몇개 있는지 확인하시오 !

	text_file = open('c:\\sherlock.txt')
	lines = text_file.readlines()
	total = 0
	
	for s in lines:
	    cnt = sum( i.isdigit() for i in s)
	    print(s, cnt)
	    total = total + cnt
	    
	print(total)
	
	132










■ 84. 문자열에 특수문자가 있는지 검사하기

	겨울왕국에는 특수문자가 몇개나 있는지 확인해보기 

	특수문자 = 전체문자 - (문자+숫자+공백)



문제 272. 겨울왕국 대본의 전체 문자의 갯수는 어떻게 되는가?

	import re
	text_file = open('c:\\winter.txt')
	text = text_file.read()
	text = re.sub('\n', '', text)
	print(len(text))

	105199



문제 273. 겨울왕국 대본에서 특수문자의 개수를 출력하시오 !

		전체문자의 개수 - 알파벳의 갯수 - 숫자의 개수 - 공백의 개수

	text_file = open('c:\\winter.txt')
	lines = text_file.readlines()
	total = 0
	total1 = 0
	
	for s in lines:
	    cnt = len(s)
	    cnt_alpha = sum( i.isalpha() for i in s)
	    cnt_digit = sum( i.isdigit() for i in s)
	    cnt_space = sum( i.isspace() for i in s)
	    total += cnt
	    total1 += cnt_alpha + cnt_digit + cnt_space
	    
	print( total - total1 )

	7083










■ 87. 문자열에서 대소문자 변환하기 (upper, lower)

	예제 :
		txt = 'A lot of Thing occur each day.'
		print( txt.upper() )
		print( txt.lower() )










■ 88. 문자열에서 좌우 공백 제거하기 (lstrip, rstrip, strip)

	예제 : 	txt = '         양쪽에 공백이 있는 문자열 입니다.         '
		print( txt.lstrip() )
		print( txt.rstrip() )
		print( txt.strip() )










■ 89. 재귀 알고리즘 기본 ( 구구단, 별)

	★ 재귀함수란?

		1. 재귀함수는 함수 내에서 다시 자신을 호출한 후 그 함수가 끝날때 까지 함수 호출 이후의
		   명령문을 수행하지 않는다.

		2. "반복문 + 스택구조가 결합된 함수"
		    먼저 들어간 데이터가 가장 마지막에 나오는 구조 
		    나중에 들어간 데이터가 가장 먼저 나오는 구조 (후입선출)


	예제 : 	def hap(a,b):
		    print(a +b)
		
		def gop(a,b):
		    print(a*b)
		
		def hap_gop(a, b):
		    hap(a, b)
		    gop(a, b)
		    
		hap_gop(2,3)

			설명 :  hap_gop함수는 그냥 a와 b값을 받아와서 hap함수와 gop함수에 던져주는 역할만
				수행한다.
				hap_gop함수가 hap함수와 gop함수를 호출했다.

				" 그런데 재귀함수는 자기 자신의 함수를 호출한다."



	예제 :	def countdown(n):	#   |	3	     |	2	     |	1		   |
		    if n == 0:		#   |	3	     |	2	     |	1		   |
		        print('발사')	#   |		     |		     |			   |
		    else:		#   |		     |		     |			   |
		        print(n)	#   |	3	     |	2	     |	1		   |
		        countdown(n-1)	#   |	countdown(2) |	countdown(1) |	countdown(0)	   |
		        
		countdown(3)
		
		3
		2
		1
		발사


		※ 재귀함수 를 사용했을 때의 장점
			1. 코드가 간결해진다.
			2. 루프문을 사용하지 않아도 된다.



문제 274. 구구단 2단을 파이썬으로 구현하시오 ! (loop문 사용)

	2 x 10 = 20
	2 x 9 = 18
	2 x 8 = 16
	2 x 7 = 14
	2 x 6 = 12
	2 x 5 = 10
	2 x 4 = 8
	2 x 3 = 6
	2 x 2 = 4
	2 x 1 = 2

	for i in range(10,0,-1):
	    print('2 x %d = %d' %(i, i*2))




문제 275. 위의 구구단을 재귀함수로 구현하시오!
	        
	countdown(10)

	2 x 10 = 20
	2 x 9 = 18
	2 x 8 = 16
	2 x 7 = 14
	2 x 6 = 12
	2 x 5 = 10
	2 x 4 = 8
	2 x 3 = 6
	2 x 2 = 4
	2 x 1 = 2

	def countdown(n):
	    if n != 0:
	        print('2 x %d = %d' %(n,n*2))
	        countdown(n-1)



	★★ 재귀함수 내부적으로 일어나는 일★★
		함수 내에서 다시 자신을 호출한 후 그 함수가 끝날 때 까지 함수 호출
		이후의 명령문은 실행하지 않는다.
		
	   countdown(10)							#    실행순서
	     print('2 x %d = %d' %(10,10*2))					#	11
	       countdown(9)
		 print('2 x %d = %d' %(9,9*2))					#	10
                   countdown(8)
		     print('2 x %d = %d' %(8,8*2))				#	9
		       countdown	
			 print('2 x %d = %d' %(7,7*2))				#	8
			   countdown(6)
			     print('2 x %d = %d' %(6,6*2))			#	7
			       countdown(5)
				 print('2 x %d = %d' %(5,5*2))			#	6
				   countdown(4)
				     print('2 x %d = %d' %(4,4*2))		#	5
				       countdown(3)
					 print('2 x %d = %d' %(3,3*2))		#	4
					   countdown(2)
					     print('2 x %d = %d' %(2,2*2))	#	3
					       countdown(1)
						 print('2 x %d = %d' %(1,1*2))	#	2
						   countdown(0)
						     출력할거 없음 끝		#	1



문제 276. loop문을 이용하지 말고 재귀함수를 이용해서 아래의 결과를 출력하시오 !

	def star_print(n):
	    if n != 0:
	        star_print(n-1)
	        print(n*'★')
	
	star_print(7)

	★
	★★
	★★★
	★★★★
	★★★★★
	★★★★★★
	★★★★★★★




문제 278. factorial 함수를 재귀함수로 구현하시오 !

	def factorial(n):
	    if n == 1:
	        return 1
	    elif n > 1:
	        return n*factorial(n-1)
	
	print(factorial(5))



문제 279. loop문을 이용해서 최대공약수를 구하시오 !

	def find_gcd(a, b):
	    dummy = 0
	    i = 1
	    c = 1
	    if a <=  b:
	        dummy = a
	        a = b
	        b = dummy
	    while i < b:
	        i += 1
	        if a%i == 0:
	            a = a / i
	            if b%i == 0:
	                b = b / i
	                c = c * i
	            i = 1
	    return c
	    
	print(find_gcd(20,16))


문제 280. (오늘의 마지막 문제) 최대공약수 구하는 함수를 재귀함수를 로 구현하시오 !

def find_gcd(a, b):
    if a <=  b:
        dummy = a
        a = b
        b = dummy












■ 91. 문자열에 있는 문자 개수 구하기 (count)

	예제 : 	txt = ' A lot of thing occur each day, every day.'
		word_count1 = txt.count('o')
		word_count2 = txt.count('day')
		word_count3 = txt.count(' ')

		print(word_count1)
		print(word_count2)
		print(word_count3)


문제 281. 아래의 연설문에 '국민'이라는 단어가 몇번 나왔는지 count하시오 !

	x = '''안녕하십니까 안철수입니다.
	 
	.................
	
	그렇습니다. 미래는 지금 우리 앞에 있습니다.
	 
	고맙습니다." '''
	word_count1 = x.count('국민')
	print(word_count1)

		※ 안철수 연설문.txt 참고 









■ 92. 문자열에서 특정 문자(열) 위치 찾기(find)

	예제 : 
		txt = 'A lot of things occur each day, every day.'
		
		result1 = txt.find('e')
		result2 = txt.find('day')
		
		print( result1 )
		print( result2 )









■ 93. 문자열을 특정 문자(열)로 분리하기 (split)

예제: 
		url = 'http://www.naver.com/news/today=20181205'
		log = 'name:홍길동 age:17 sex:남자 nation:조선'

		result = url.split('/')
		print(result)



문제 283. 아래의 log변수를 가지고 아래의 결과를 출력하시오 !

	log = 'name:홍길동 age:17 sex:남자 nation:조선'
	log_split = log.split(' ')
	for i in log_split:
	    st = i.split(':')
	    print('%s --> %s'%(st[0],st[1]))











■ 94. 문자열을 특정 문자(열)로 결합하기(join)

	예제 : 
		loglist = ['2018/12/05','200','ok','이 또한 지나가리라']
		bond = ';'

		log = bond.join(loglist)
		print(log)











■ 95. 문자열에서 특정 문자(열)을 다른 문자(열)로 바꾸기 (replace)

	예제 : 	txt = 'My password is 1234'
		result1 = txt.replace('1', '0')
		print(result)



문제 284. split이용하지 말고 가급적 replace를 이용해서 log리스트에서 아래의 결과를 출력하시오 !

	log = 'name:홍길동 age:17 sex:남자 nation:조선'
	log_split = log.split(' ')
	for i in log_split:
	    st = i.replace(':',' --> ')
	    print(st)












■ 96. 문자열을 바이트 객체로 바꾸기 (encode)

	* 인코딩이란 ?
		"인코딩이란 사람이 인지할 수 있는 형태의 데이터를 약속된 규칙에 의해 컴퓨터가 사용하는
		 0과 1로 변환하는 과정을 말한다."

		컴퓨터의 발명, 발전이 미국의 학계와 기업을 중심으로 이루어지다보니 문자집합도 미국을 기준
		으로 제정되었다.
		미국에서 재정된 ASCII(미국 정보 교화 표준 부호)는 1960년대 제정된 문자집합으로 이후 개발된
		문자집합의 토대를 이루고 있다.

		ASCII는 7비트 만을 이용해서 음이 아닌 수 (0 ~ 127)의 문자집합내의 문자를 할당한 약속이다.

		예 : 숫자 65는 'A', 97은 'a'를 할당했다.

	예제 : 	u_txt = 'A'
		b_txt = u_txt.encode()
		print(u_txt)
		print(b_txt[0])

		A
		65

		이 아스키 코드표로 미국 엔지니어들은 행복하게 살아가고 있었지만 다른나라 사람들은 그러지
		못했다.

		1. 서유럽
			독일어의 움라우트, 스페인어의 물결표, 터키어의 시딜러, 프랑스어의 악센트는 
			7비트로 표현하지 못했다. 
			그래서 미국 표준을 보완한 새로운 국제 표준이 등장했다.

			미국 표준인 0 ~ 127 영역은 그대로 유지하고 128 ~ 255 영역에 서유럽어에서 필요한
			문자를 추가했다. 

			128(2의 7승) 에 256(2의 8승)인 8비트로 표현하는 문자집합을 추가해서 서유럽어는 
			컴퓨터로 구현 가능하게 했다.

		2. 아시아
			아시아에서는 한자, 일본어, 한글이 8비트에 들어맞지 않았다.
			아시아를 위해서 더블 캐릭터 셋 16비트로 된 문자집합을 제공해서 해결했다. 
			65,536(2의 16승) 개의 문자를 할당할 수 있다.

			EUC-KR, CP949가 여기에 해당된다.

			그런데 갑자기 크게 두가지 문제가 발생했다.

			1. 포스코 더 샆 아파트

				insert into emp(empno, ename, address)
				  values(1111, '김인호', '포스코더샾')

				select * from emp;

					1111, 김인호, 포스코더?

			2. EUC-KR를 지원하는 일본어용 소프트웨어를 한글윈도우에서 실행하면 텍스트 깨진다.

			이 문제를 해결하기 위해서 나온게 바로 유니코드이다. 
			UTF-7, UTF-8, UTF-6, UTF-32
			이중에 UTF-8을 가장 많이 사용한다.

	f = open('c:\\ladybug3.txt','r',encoding = 'UTF-8')









■ 97. 바이트 객체를 문자열로 바꾸기 (decode)

	encoding : 사람이 알아볼 수 있는 언어 --> 컴퓨터가 알아볼 수 있는 숫자로 변경
	decoding : 컴퓨터가 알아볼 수 있는 언어 --> 사람이 알아볼 수 있는 언어로 변경

	예제 : 	u_txt = 'A'
		b_txt = u_txt.encode()
		print(u_txt)
		print(b_txt[0])

		c_txt = b_txt.decode()
		print(c_txt)



문제 285. ascii코드표를 파이썬으로 출력하시오 !

		alpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'
		for i in range(len(alpha)):
		    a_txt = alpha[i].encode()
		    print (a_txt[0], '-->',alpha[i])

	답 : 
		import string
		for i in range(128):
		    print( i, '-->', chr(i))








■ 98. 버블정렬


문제 286. 아래의 리스트를 버블정렬하는 함수를 생성하시오 !
	  (loop문으로 수행)

	def bubble_sort(data):
	    dummy = 0                       #자리를 바꾸기 위한 더미변수
	    for j in range(len(data)):
	        for i in range(len(data)-1):
	            if data[i] > data[i+1]:
	                dummy = data[i]
	                data[i] = data[i+1]
	                data[i+1] = dummy
	    return data
	
	a = [5, 4, 3, 2, 1, 8, 7, 10]
	print(bubble_sort(a))   



문제 287. 버블정렬을 재귀로 구현하시오 !(오늘의 마지막 문제)
      
	def bubble_sort(data,j=0,i=0):
	    dummy = 0
	    if data[i] > data[i+1]:
	        dummy = data[i]
	        data[i] = data[i+1]
	        data[i+1] = dummy
	    if i == len(data)-2:
	        j = j+1
	        i = -1
	    if j <= len(data):
	        bubble_sort(data,j,i+1)
	    return data
	
	a = [5, 4, 3, 2, 1, 8, 7, 10]
	print(bubble_sort(a))    











